
#!/usr/bin/env python3

import json
import locale
import sys
import emails
import os
import reports
import requests


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
  print(max_revenue)


  # TODO: also handle max sales
  max_sale = {"total_sales": 0}
  for item in data:
    item_sale = item["total_sales"]
    if item_sale > max_sale["total_sales"]:
      #item["total_sales"] = item_sale
      #item["car"]["car_model"] = item_model
      max_sale = item
  print(max_sale["car"]["car_model"])


  # TODO: also handle most popular car_year
  year_dict = {}
  for item in data:
    item_year = item["car"]["car_year"]
    item_sale = item["total_sales"]
    if item_year not in year_dict:
        year_dict[item_year] = item_sale
    else:
        year_dict[item_year] += item_sale

  popular_year = ""
  popular_sale = 0
  for year, sale in year_dict.items():
    if sale > popular_sale:
      popular_year = year
      popular_sale = sale


  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      max_sale["car"]["car_model"], max_sale["total_sales"]),
    "The most popular year was {} with {} sales.".format(
       popular_year, popular_sale)
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data



def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")

  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report


  summary_string = "<br/>".join(summary)
  reports.generate("/tmp/cars.pdf", "A Summary Of of Last Month's Sales", summary_string, cars_dict_to_table(data))

  # TODO: send the PDF report as an email attachment

  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "\n".join(summary)

  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)




if __name__ == "__main__":
  main(sys.argv)
